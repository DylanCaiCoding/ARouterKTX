@file:Suppress("unused")

package com.dylanc.arouter.initializer

import android.app.Application
import android.content.Context
import android.content.pm.ApplicationInfo
import android.util.Log
import androidx.startup.Initializer
import com.alibaba.android.arouter.launcher.ARouter
import com.alibaba.android.arouter.utils.ClassUtils
import com.alibaba.android.arouter.utils.Consts
import com.alibaba.android.arouter.utils.PackageUtils
import com.dylanc.arouter.core.loginActivityPath
import com.dylanc.arouter.core.requireLoginPaths
import com.dylanc.arouter.template.IRoutePaths
import java.util.HashSet

/**
 * @author Dylan Cai
 */
internal class ARouterInitializer : Initializer<Unit> {

  override fun create(context: Context) {
    val isDebug = context.packageManager.getApplicationInfo(context.packageName, 0).flags and
        ApplicationInfo.FLAG_DEBUGGABLE != 0
    if (isDebug) {
      ARouter.openLog()
      ARouter.openDebug()
    }
    ARouter.init(context as Application)

    val clazz = Class.forName("${Consts.ROUTE_ROOT_PAKCAGE}.ARouter$\$LoginInfo")

    try {
      loginActivityPath = clazz.getField("activityPath")[clazz.newInstance()] as? String

      val routerMap: Set<String>

      // It will rebuild router map every times when debuggable.
      if (ARouter.debuggable() || PackageUtils.isNewVersion(context)) {
        ARouter.logger.info(Consts.TAG, "Run with debug mode or new install, rebuild router map.")
        // These class was generated by arouter-compiler.
        routerMap = ClassUtils.getFileNameByPackageName(context, Consts.ROUTE_ROOT_PAKCAGE)
        if (routerMap.isNotEmpty()) {
          context.getSharedPreferences(Consts.AROUTER_SP_CACHE_KEY, Context.MODE_PRIVATE).edit().putStringSet(Consts.AROUTER_SP_KEY_MAP, routerMap)
            .apply()
        }
        PackageUtils.updateVersion(context) // Save new version name when router map update finishes.
      } else {
        ARouter.logger.info(Consts.TAG, "Load router map from cache.")
        routerMap =
          HashSet(context.getSharedPreferences(Consts.AROUTER_SP_CACHE_KEY, Context.MODE_PRIVATE).getStringSet(Consts.AROUTER_SP_KEY_MAP, HashSet()))
      }

      for (className in routerMap) {
        if(className.startsWith("${Consts.ROUTE_ROOT_PAKCAGE}.ARouter$\$Paths$\$")){
          (Class.forName(className).newInstance() as? IRoutePaths)?.loadInto(requireLoginPaths)
        }
      }

      Log.d("Paths", requireLoginPaths.toString())
    } catch (e: NoSuchFieldException) {
    } catch (e: Exception) {
      e.printStackTrace()
    }
  }

  override fun dependencies() = emptyList<Class<Initializer<*>>>()
}